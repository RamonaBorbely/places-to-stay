// This is the user page
// To this page non admin users are redirected
// This page containes components which can be seen in import statements and can be found in components folder

'use client'; // indicates that is a client side component

import { useEffect, useState } from 'react';
import BookPLace from '../places/[id]/book/page';
import BookingHistory from '../components/BookingHistory'; 
import { useRouter, useSearchParams } from 'next/navigation';
import { auth } from '@/firebase/firebaseConfig';
import Link from 'next/link';

// main user page component
const Userpage = () => {
  // state variables for user data and UI 
  const [user, setUser] = useState(undefined)
  const [bookingComplete, setBookingComplete] = useState(false)
  const [viewBookings, setViewBookings] = useState(false)

  // initialising router and search parameters from next js
  const router = useRouter()
  const searchParams = useSearchParams()

  // get the place id from the URL
  const placeId = searchParams.get('placeId')

  // useEffect hook to handle auth state changes
  useEffect(() => {
    // listening for changes in auth state
    const unsubscribe = auth.onAuthStateChanged(currentUser => {
      // update user state when auth state changes
      setUser(currentUser)
    })
    // clean the listener
    return () => unsubscribe()
  }, [])

  // this is here so no non authenticated users can see this page
  useEffect(() => {
    if (user === null) {
      // redirect to login page if user is not authenticated
      router.push('/login')
    }
  }, [user, router]) // the dependency array. this hook will run again when one of these change


  // handler when user finished booking a place
  const handleBookingComplete = () => {
    setBookingComplete(true)
  }

// while user state is determined, a loading message is shown 
  if (user === undefined) {
    return (
      <div className="flex items-center justify-center bg-light">
        <p className="text-lg text-gray-600">Loading...</p>
      </div>
    )
  }

// this is added here so no part of this UI is visible before the redirect finished
// without this here, for a brief moment this content was visible
  if (!user) {
    return null
  }


  return (
  <>

    <div className="flex flex-col items-center justify-start min-h-screen bg-light p-4">
      
      {/* toogle to show or hide booking history */}
      <ul className="flex flex-col items-center space-y-4 mb-8">
        <li 
          onClick={() => setViewBookings(!viewBookings)} 
          className="cursor-pointer p-4 hover:scale-110 tracking-wider rounded-md shadow bg-darkBlue text-light transition"
        >
          {viewBookings ? 'Close' : 'Bookins List'}
        </li>
      </ul>

      {/* conditional render. short circuit. if viewBookings is true, will render BookingHistory */}
      {viewBookings && <BookingHistory userId={user.uid} />} 

      {/* render BookPLace only if bokking is not comppleted and a place id exists */}
      {!bookingComplete && placeId && (
        <BookPLace
          params={{ id: placeId }}
          onBookingComplete={handleBookingComplete}
        />
      )}

      {/* when booking is completed the message from p element will be visible */}
      {bookingComplete && <p>Your booking has been completed successfully!</p>}

      {/* link to main page */}
      <Link href='/'>
        <p 
          className='cursor-pointer mt-20 hover:scale-110 p-4 tracking-wider rounded-md shadow bg-darkBlue transition text-light'
        >
          Back to Home
        </p>
      </Link>
    </div>
    </>
  )
}

export default Userpage; // generated by rafce snippets
